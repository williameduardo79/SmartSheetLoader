@page "/upload"
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using SmartSheetLoader.Models
@using SmartSheetLoader.Services
@using Syncfusion.Blazor.Spinner
@inject ISmartsheetClient SSC
@inject ICsvProcessor CSV
@inject NavigationManager NavManager
<h3>Upload Sheet</h3>
    <div class="row">
    <div class="col-sm">
        <div class="spin-row">
            <SfSpinner Size="40" Label="Fabric" Type="SpinnerType.Fabric" Visible="true"></SfSpinner>
        </div>
    </div>
    </div>


<EditForm Model="@uploadFormModel" Context="formContext">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="nameInput">Name:</label>
        <InputText id="nameInput" @bind-Value="uploadFormModel.Name" class="form-control" />
       
    </div>

    <div class="form-group">
        <label for="fileInput">File:</label>
        <InputFile id="fileInput" OnChange="LoadFiles" @bind-Value="uploadFormModel.File" class="form-control" />
       
    </div>
    <div class="form-group">
        <label for="GroupBy">Group By:</label>
        <InputSelect id="GroupBy" @bind-Value="selectedOption" class="form-control">
            <option value="**None">No Grouping</option>
            @foreach (var option in groupByOptions)
            {
                <option value="@option">@option</option>
            }
        </InputSelect>

    </div>
    <div class="form-group">
        <label for="SumBy">Sum By:</label>
        <InputSelect id="SumBy" @bind-Value="sumOption" class="form-control">
            <option value="**None">No Sum</option>
            @foreach (var option in sumOptions)
            {
                <option value="@option">@option</option>
            }
        </InputSelect>

    </div>
    @if(!loading)
    {
        <button type="submit" class="btn btn-primary" @onclick="@(() =>HandleValidSubmit(formContext))">Submit</button>
    }
   
</EditForm>
<style>
    #container {
        margin-top: 80px;
    }

        #container .row {
            display: flex;
        }

            #container .row .col-sm {
                width: 20%
            }

    .spin-row {
        position: relative;
        height: 120px;
        width: 120px;
    }

    #container .row {
        margin-right: 0px;
        margin-left: 0px;
    }

    .material .e-spinner-pane .e-spinner-inner .e-spin-bootstrap {
        fill: #e3165b;
    }

    .material .e-spinner-pane .e-spinner-inner .e-spin-bootstrap, .material .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4, .material .e-spinner-pane .e-spinner-inner .e-spin-high-contrast .e-path-arc {
        stroke: #e3165b;
    }

    .e-spinner-pane .e-spinner-inner .e-spin-high-contrast .e-path-circle {
        stroke: none;
    }

    .highcontrast .e-spinner-pane .e-spinner-inner .e-spin-bootstrap {
        fill: #ffd939;
    }

    .highcontrast .e-spinner-pane .e-spinner-inner .e-spin-material, .highcontrast .e-spinner-pane .e-spinner-inner .e-spin-bootstrap, .highcontrast .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4, .highcontrast .e-spinner-pane .e-spinner-inner .e-spin-high-contrast .e-path-arc {
        stroke: #ffd939;
    }

    .bootstrap4 .e-spinner-pane .e-spinner-inner .e-spin-high-contrast .e-path-arc {
        stroke: #007bff;
    }

    .tailwind .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: #4f46e5;
    }

    .material3-dark .e-spinner-pane .e-spinner-inner .e-spin-label,
    .material-dark .e-spinner-pane .e-spinner-inner .e-spin-label {
        color: #fff;
    }

    .bootstrap-dark .e-spinner-pane .e-spinner-inner .e-spin-material, .bootstrap-dark .e-spinner-pane .e-spinner-inner .e-spin-fabric .e-path-arc, .bootstrap-dark .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4, .bootstrap-dark .e-spinner-pane .e-spinner-inner .e-spin-high-contrast .e-path-arc {
        stroke: #fff;
    }

    .bootstrap .e-spinner-pane .e-spinner-inner .e-spin-fabric .e-path-circle {
        stroke: rgba(0, 0, 0, 0.4);
    }

    .bootstrap4 .e-spinner-pane .e-spinner-inner .e-spin-fabric .e-path-arc {
        stroke: #007bff;
    }

    .bootstrap4 .e-spinner-pane .e-spinner-inner .e-spin-fabric .e-path-circle {
        stroke: rgba(0, 123, 255, 0.4);
    }

    .highcontrast .e-spinner-pane .e-spinner-inner .e-spin-fabric .e-path-circle {
        stroke: rgba(255, 217, 57, 0.4);
    }

    .tailwind .e-spinner-pane .e-spinner-inner .e-spin-fabric .e-path-circle {
        stroke: rgba(79, 70, 229, 0.4);
    }

    .fabric-dark .e-spinner-pane .e-spinner-inner .e-spin-fabric .e-path-circle {
        stroke: rgba(0, 116, 204, 0.4);
    }

    .bootstrap-dark .e-spinner-pane .e-spinner-inner .e-spin-fabric .e-path-circle {
        stroke: rgba(255, 255, 255, 0.4);
    }

    .tailwind-dark .e-spinner-pane .e-spinner-inner .e-spin-fabric .e-path-circle {
        stroke: rgba(34, 211, 238, 0.4);
    }

    .tailwind-dark .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: #22d3ee;
    }

    @@media only screen and (max-width: 1025px) {
        #container .row {
            display: flex;
        }
    }
</style>
@code {
    private UploadFormModel uploadFormModel = new UploadFormModel();
    private List<string> groupByOptions = new List<string>();
    private List<string> sumOptions = new List<string>();
    private string selectedOption;
    private string sumOption;
    private bool loading = false;

    private async Task HandleValidSubmit(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (!formIsValid)
        {
            return;
        }
        // Handle form submission
        if (uploadFormModel.File != null)
        {
            loading = true;
            StateHasChanged();

            await ProcessFile().ConfigureAwait(false);
            
            NavManager.NavigateTo("/");
            loading = false;
        }
        // You can also access the 'uploadFormModel.Name' here
    }
    private async Task ProcessFile()
    {
        using (var memoryStream = new MemoryStream())
        {
            await uploadFormModel.File.OpenReadStream().CopyToAsync(memoryStream);
            byte[] fileBytes = memoryStream.ToArray();
            // Process the fileBytes
            try
            {
                var loadedFile = await SSC.PostCsvAsync(uploadFormModel.Name, fileBytes);


                if (selectedOption != "**None")
                {
                    await SSC.AddGroupingToSheetAsync(loadedFile.result.id, selectedOption);

                }
                if (sumOption != "**None")
                {
                    await SSC.AddSumToSheetAsync(loadedFile.result.id, sumOption);
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

        }
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var selectedFiles = e.GetMultipleFiles();
        foreach (var file in selectedFiles)
        {
            uploadFormModel.File = file;
            using (var stream = file.OpenReadStream())
            {
                // Read the content of the file
                byte[] buffer = new byte[file.Size];
                await stream.ReadAsync(buffer, 0, buffer.Length);

                // Now 'buffer' contains the content of the uploaded file
                // You can process the file content here
                var headers = CSV.GetFileHeaders(buffer);
                groupByOptions = headers.Where(x => x.DataTypeEnum == SmartSheetLoader.Enums.HeaderDataTypeEnum.text).Select(y => y.HeaderTitle).ToList();
                sumOptions = headers.Where(x => x.DataTypeEnum == SmartSheetLoader.Enums.HeaderDataTypeEnum.number).Select(y => y.HeaderTitle).ToList();
            }
           

        }
    }
    private void HandleInvalidSubmit()
    {
        // Handle invalid form submission
    }
   }
